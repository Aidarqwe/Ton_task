#include "imports/stdlib.fc";


global slice admin_address;


const op::accept_funds = 0xa4d8086f;
const op::admin_withdraw = 0x217e5898;


() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(admin_address)
        .end_cell()
    );
}


() load_data() impure inline {
    slice ds = get_data().begin_parse();
    admin_address = ds~load_msg_addr();
    ds.end_parse();
}

() send_empty_message( int amount, slice to, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(0, 107)
    .end_cell();
    send_raw_message(msg, mode);
}




() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()){
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if(flags & 1){
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    load_data();


    if(op == op::accept_funds){
        throw_unless(99, msg_value >= 2000000000);
        return();
    }


    if(op == op::admin_withdraw){
        throw_unless(100, equal_slices(sender_address, admin_address));
        throw_unless(101, my_balance - msg_value >= 500000000);
        send_empty_message(msg_value, admin_address, 1);
        return();
    }


    throw(0xffff);



}
